% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/evaluateLearner.R
\name{evaluateLearner}
\alias{evaluateLearner}
\alias{evaluateParset}
\title{Evaluates expressions within a learner or parameter set according to the task.}
\usage{
evaluateLearner(learner, task)

evaluateParset(par.set, task)
}
\arguments{
\item{learner}{[\code{\link{Learner}} | \code{character(1)}]\cr
The learner.
If you pass a string the learner will be created via \code{\link{makeLearner}}.}

\item{task}{[\code{\link{Task}}]\cr
The task.}

\item{par.set}{[\code{\link[ParamHelpers]{ParamSet}}]\cr
Parameter set of (hyper)parameters and their constraints.
Dependent parameters with a \code{requires} field must use \code{quote} and not
\code{expression} to define it.}
}
\value{
[\code{\link{Learner}} | \code{\link[ParamHelpers]{ParamSet}}].
}
\description{
Updates learners and/or parameter sets by evaluating their expressions
based on a specific task.
}
\examples{
## (1) evaluation of a learner's hyperparameters
task = makeClassifTask(data = iris, target = "Species")
lrn1 = makeLearner("classif.rpart", minsplit = expression(k * p))
lrn2 = evaluateLearner(learner = lrn1, task = task)

lrn1$par.vals$minsplit
lrn2$par.vals$minsplit

## (2) evaluation of a learner's entire parameter set
task = makeClassifTask(data = iris, target = "Species")
lrn1 = makeLearner("classif.randomForest")
lrn2 = evaluateLearner(learner = lrn1, task = task)

## focus on the parameters 'mtry', 'classwt' and 'cutoff'
lrn1$par.set
lrn2$par.set

## (3) evaluation of a parameter set
task = makeClassifTask(data = iris, target = "Species")
ps1 = makeParamSet(
  makeNumericParam("C", lower = expression(k), upper = expression(n), trafo = function(x) 2^x),
  makeDiscreteParam("sigma", values = expression(list(k, p)))
)
ps2 = evaluateParset(par.set = ps1, task = task)
}

